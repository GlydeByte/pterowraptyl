import { PteroClient } from "../../core/client.js";

import { Account, TwoFactorDisable, TwoFactor } from "../../types/client/accounts/accounts.js";
import { getAccount } from "./accounts/getAccount.js";
import { getTwoFa } from "./accounts/getTwoFa.js";
import { enableTwoFa } from "./accounts/enableTwoFa.js";
import { TwoFactorEnableRequest } from "../../types/client/accounts/accounts.js";
import { disableTwoFa } from "./accounts/disableTwoFa.js";
/**
 * Module for accessing Pterodactyl client account endpoints.
 * This module provides methods to access account details, 2fa, update account information, etc.
 *
 * @example
 * ```ts
 * const account = await ptero.accounts.getAccount();
 * console.log(account);
 * ```
 */
export class AccountsModule {
  constructor(private client: PteroClient) {
    if (!this.client) {
      throw new Error("PteroClient is required.");
    }
  }

  /**
   * Get the account details of the authenticated user.
   * @example
   * ```ts
   * const account = await ptero.accounts.getAccount();
   * console.log(account);
   * ```
   * @returns {Promise<Account>}
   */
  getAccount(): Promise<Account> {
    return getAccount(this.client);
  }

  /**
   * Generates string for 2fa QR code which can be used to set up 2fa in Pterodactyl.
   * @example
   * ```ts
   * const twoFa = await ptero.accounts.getTwoFa();
   * console.log(twoFa);
   * ```
   * @return {Promise<TwoFactor>}
   */
  getTwoFa(): Promise<TwoFactor> {
    return getTwoFa(this.client);
  }

  /**
   * Enables two-factor authentication for the authenticated user.
   * This method requires the user's password and the code generated by the 2fa app (e.g. Google Authenticator).
   * * @example
   * ```ts
   * const twoFaEnable = await ptero.accounts.enableTwoFa({code: twoFaCode, password: "userPassword"});
   * console.log("Two-factor authentication enabled:", twoFaEnable);
   * ```
   * @param enableTwoFaData - The code to enable 2fa and user's password
   * @returns {Promise<{ tokens: string[] }>}
   */
  enableTwoFa(
    enableTwoFaData: TwoFactorEnableRequest
  ): Promise<{ tokens: string[] }> {
    return enableTwoFa(this.client, enableTwoFaData);
  }

  disableTwoFa(data: TwoFactorDisable): Promise<boolean> {
    return disableTwoFa(this.client, data);
  };
}
